From: Kyle Moffett <kyle@moffetthome.net>
Date: Mon, 13 Apr 2015 03:13:15 +0000
Subject: compile.sh: Use $CXX/$CXXFLAGS for C++ compiler and its options.

Traditionally, "$CPP" is the C preprocessor, not the C++ compiler, and
the $CFLAGS variable is only for C compilation, not C++.
---
 compile.sh | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/compile.sh b/compile.sh
index cf670a7..35fbcf0 100755
--- a/compile.sh
+++ b/compile.sh
@@ -25,14 +25,14 @@ mkdir -p output/objs
 mkdir -p output/native
 
 # May be passed in from outside.
-CFLAGS="$CFLAGS"
+CXXFLAGS="$CXXFLAGS"
 LDFLAGS="$LDFLAGS"
 ZIPOPTS="$ZIPOPTS"
 
 # TODO: CC target architecture needs to match JAVA_HOME.
 CC=${CC:-gcc}
-CPP=${CPP:-g++}
-CPPSTD="c++0x"
+CXX=${CXX:-g++}
+CXXSTD="c++0x"
 
 unset JAVA_TOOL_OPTIONS
 
@@ -171,7 +171,7 @@ msys*|mingw*)
   # Use a simplified platform string.
   PLATFORM="mingw"
   # Workaround for msys issue which causes omission of std::to_string.
-  CFLAGS="$CFLAGS -D_GLIBCXX_USE_C99 -D_GLIBCXX_USE_C99_DYNAMIC"
+  CXXFLAGS="$CXXFLAGS -D_GLIBCXX_USE_C99 -D_GLIBCXX_USE_C99_DYNAMIC"
   LDFLAGS="-larchive ${LDFLAGS}"
   MD5SUM="md5sum"
   EXE_EXT=".exe"
@@ -321,11 +321,11 @@ function cc_compile() {
   for FILE in "$@"; do
     if [[ ! "${FILE}" =~ ^-.*$ ]]; then
       local OBJ=$(basename "${FILE}").o
-      "${CPP}" \
+      "${CXX}" \
          -I src/main/cpp/ \
           ${ARCHIVE_CFLAGS} \
-          ${CFLAGS} \
-          -std=$CPPSTD \
+          ${CXXFLAGS} \
+          -std=$CXXSTD \
           -c \
           -DBLAZE_JAVA_CPU=\"k8\" \
           -DBLAZE_OPENSOURCE=1 \
@@ -344,7 +344,7 @@ function cc_link() {
     local OBJ=$(basename "${FILE}").o
     FILES+=("output/${OBJDIR}/${OBJ}")
   done
-  "${CPP}" -o ${OUTPUT} "${FILES[@]}" -lstdc++ ${LDFLAGS}
+  "${CXX}" -o ${OUTPUT} "${FILES[@]}" -lstdc++ ${LDFLAGS}
 }
 
 function cc_build() {
@@ -406,12 +406,12 @@ if [ ! -z "$JNILIB" ] ; then
   log "Compiling JNI libraries..."
   for FILE in "${NATIVE_CC_FILES[@]}"; do
     OUT=$(basename "${FILE}").o
-    "${CPP}" \
+    "${CXX}" \
       -I src/main/cpp/ \
       -I src/main/native/ \
       -I "${JAVA_HOME}/include/" \
       -I "${JAVA_HOME}/include/${PLATFORM}" \
-      -std=$CPPSTD \
+      -std=$CXXSTD \
       -fPIC \
       -c \
       -D_JNI_IMPLEMENTATION_ \
@@ -422,12 +422,12 @@ if [ ! -z "$JNILIB" ] ; then
   done
 
   log "Linking ${JNILIB}..."
-  "${CPP}" -o output/${JNILIB} $JNI_LD_ARGS -shared output/native/*.o -l stdc++
+  "${CXX}" -o output/${JNILIB} $JNI_LD_ARGS -shared output/native/*.o -l stdc++
 fi
 
 log "Compiling build-runfiles..."
 # Clang on Linux requires libstdc++
-"${CPP}" -o output/build-runfiles -std=c++0x -l stdc++ src/main/tools/build-runfiles.cc
+"${CXX}" -o output/build-runfiles -std=c++0x -l stdc++ src/main/tools/build-runfiles.cc
 
 log "Compiling process-wrapper..."
 "${CC}" -o output/process-wrapper -std=c99 src/main/tools/process-wrapper.c
